export const reducer = (state, action: {type: string}) => {
  console.log(action)
  switch (action.type) {
    case "set_user":
      console.log('login')
      localStorage.setItem('name', state.name);
      localStorage.setItem('email', state.email);
      return {
        ...state,
        name: state.name,
        email: state.email
      }
    case "clear_user":
      console.log('logout')
      localStorage.removeItem('name');
      localStorage.removeItem('email');
      return {
        ...state,
        name: '',
        email: ''
      }
    default:
      return state
  }
}

export interface user {
  name: string,
  email: string
}

export const initialState: any = {
  name: '',
  email: ''
}

///////////////////////////////////

import React from 'react';
import { reducer, initialState, user } from './reducer'

export const UserContext = React.createContext({
  currentUser: initialState,
  dispatch: reducer
})

export const UserProvider = ({ children }) => {
  
  const [_, dispatch] = React.useReducer(reducer, initialState);

  const currentUser: user | any = () => {
    const name = localStorage.getItem('name') as string;
    const email = localStorage.getItem('email') as string;
    return {
      name: name,
      email: email
    };
  };
  /* console.log('currentUser: ')
  console.log(currentUser) */
  const setCurrentUser = () => {
    
  }
  
  return (
    <UserContext.Provider value={{currentUser, dispatch}}>
      {children}
    </UserContext.Provider>
  )
  /* const getUser = () => {
    const name = localStorage.getItem('name');
    const email = localStorage.getItem('email');
    //const userToken = JSON.stringify(tokenString as string); //pff alpedo
    //console.log(tokenString);
    return {
      name: name,
      email: email
    };
  };
   const saveUser = (name, email) => {
    localStorage.setItem('name', name);
    localStorage.setItem('email', email);
    setCurrentUser({
      name: name,
      email: email
    });
  }; */



  /* return {
    setCurrentUser: saveUser,
    currentUser,
  }; */
}